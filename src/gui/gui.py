# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'src/gui/gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os
sys.path.insert(0,os.path.abspath(os.curdir))

from src.dataprocessor.ymldb import *
from src.tester.recog import *
from src.tester.webcam import *

def start():
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


class Ui_MainWindow(object):
    data = None
    tres = None
    def read_db(self):
        file = QtWidgets.QFileDialog.getOpenFileName()
        if (file[0].endswith('.yml')):
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Reading Database")
            msg.setText("If the GUI is not responding, please wait until the reading process is finished")
            msg.exec_()
            self.data = read_from_yml(os.path.dirname(file[0]),os.path.basename(file[0]))
            self.tres = get_treshold(self.data)
            self.trainingTime_2.setText("Chosen from DB")
        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please select a valid database")
            msg.exec_()
    def training(self):
        folder = QtWidgets.QFileDialog()
        file = folder.getExistingDirectory(None, "Select Folder")
        if file != '':
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Training")
            msg.setText("If the GUI is not responding, please wait until the training is finished")
            msg.exec_()
            self.build_data(file)
            self.trainingTime_2.setText(str(os.path.basename(file)))
        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please select a valid folder")
            msg.exec_()
    def recog(self):
        if self.data == None or self.tres == None:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please train the model first")
            msg.exec_()
        else:
            file = QtWidgets.QFileDialog.getOpenFileName()
            if (file[0].endswith(".jpg") or file[0].endswith(".png") or file[0].endswith(".jpeg") or file[0].endswith(".pgm") or file[0].endswith(".bmp")):
                self.trainingTime_3.setText(str(os.path.basename(file[0])))
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Recognizing")
                msg.setText("If the GUI is not responding, please wait until the recognition process is finished")
                msg.exec_()
                self.recognize(file[0])
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("Please select a valid image file")
                msg.exec_()
    def recogWebcam(self):
        if self.data == None or self.tres == None:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please train the model first")
            msg.exec_()
        else:
            start_webcam(self.data, self.tres)
    def build_data(self, url):
        import time
        start_time = time.time_ns()
        pict_arr = get_pict_array(url)
        mean_face = get_mean_vspace(pict_arr)
        faces = eigenfaces(get_mean_diff_array(pict_arr, mean_face)).T
        faces = faces[:50, :]
        recog_faces = build_recog_face(url, mean_face, faces)
        yml_dict = build_dict_eigen(mean_face, faces, recog_faces)
        save(yml_dict, os.curdir+'/test')
        self.data = read_from_yml(os.curdir+'/test', 'db.yml')
        self.tres = get_treshold(self.data)
        end_time = time.time_ns()
        time_lapsed = end_time - start_time
        time = str("{:02d}:{:02d}:{:02d}.{:03d}".format(int(time_lapsed // 3_600_000_000_000), int((time_lapsed // 60_000_000_000) % 60), int((time_lapsed // 1_000_000_000) % 60), int((time_lapsed // 1_000_000)%1000)))
        self.trainingTime.setText(str(time))
    def recognize(self, url):
        import time
        start_time = time.time_ns()
        self.testImage.setPixmap(QtGui.QPixmap(url))
        self.testImage.setScaledContents(True)
        face_test = cv2.imread(url, cv2.IMREAD_GRAYSCALE)
        res = find_match(face_test,self.data,self.tres)
        end_time = time.time_ns()
        time_lapsed = end_time - start_time
        time = str("{:02d}:{:02d}:{:02d}.{:03d}".format(int(time_lapsed // 3_600_000_000_000), int((time_lapsed // 60_000_000_000) % 60), int((time_lapsed // 1_000_000_000) % 60), int((time_lapsed // 1_000_000)%1000)))
        self.execTime.setText(str(time))
        if res!=None:
            self.matchLabel.setText(str(res[0]))
            self.closestImage.setPixmap(QtGui.QPixmap(str(res[2])))
            self.closestImage.setScaledContents(True)
        else:
            self.matchLabel.setText('None')
            self.closestImage.setPixmap(QtGui.QPixmap(str('src/gui/none.jpg')))
            self.closestImage.setScaledContents(True)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(877, 499)
        MainWindow.setMinimumSize(QtCore.QSize(877, 499))
        MainWindow.setMaximumSize(QtCore.QSize(877, 499))
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color:rgba(250,250,250,255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.appTitle = QtWidgets.QLabel(self.centralwidget)
        self.appTitle.setGeometry(QtCore.QRect(90, 10, 691, 81))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(48)
        self.appTitle.setFont(font)
        self.appTitle.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.appTitle.setStyleSheet("text-align:center;\n"
"background:rgba(0,0,0,0);")
        self.appTitle.setTextFormat(QtCore.Qt.AutoText)
        self.appTitle.setObjectName("appTitle")
        self.titleLine = QtWidgets.QFrame(self.centralwidget)
        self.titleLine.setGeometry(QtCore.QRect(-10, 90, 891, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.titleLine.sizePolicy().hasHeightForWidth())
        self.titleLine.setSizePolicy(sizePolicy)
        self.titleLine.setMinimumSize(QtCore.QSize(0, 5))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.titleLine.setPalette(palette)
        self.titleLine.setStyleSheet("background: rgba(0,0,0,0);")
        self.titleLine.setLineWidth(0)
        self.titleLine.setMidLineWidth(5)
        self.titleLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.titleLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.titleLine.setObjectName("titleLine")
        self.testImageBorder = QtWidgets.QGraphicsView(self.centralwidget)
        self.testImageBorder.setGeometry(QtCore.QRect(270, 160, 251, 251))
        self.testImageBorder.setObjectName("testImageBorder")
        self.closestImageBorder = QtWidgets.QGraphicsView(self.centralwidget)
        self.closestImageBorder.setGeometry(QtCore.QRect(570, 160, 251, 251))
        self.closestImageBorder.setObjectName("closestImageBorder")
        self.testLabel = QtWidgets.QLabel(self.centralwidget)
        self.testLabel.setGeometry(QtCore.QRect(270, 120, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        self.testLabel.setFont(font)
        self.testLabel.setObjectName("testLabel")
        self.closestLabel = QtWidgets.QLabel(self.centralwidget)
        self.closestLabel.setGeometry(QtCore.QRect(570, 120, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        self.closestLabel.setFont(font)
        self.closestLabel.setObjectName("closestLabel")
        self.datasetLabel = QtWidgets.QLabel(self.centralwidget)
        self.datasetLabel.setGeometry(QtCore.QRect(20, 110, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.datasetLabel.setFont(font)
        self.datasetLabel.setObjectName("datasetLabel")
        self.imageLabel = QtWidgets.QLabel(self.centralwidget)
        self.imageLabel.setGeometry(QtCore.QRect(20, 270, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.imageLabel.setFont(font)
        self.imageLabel.setStyleSheet("background:rgba(0,0,0,0);")
        self.imageLabel.setObjectName("imageLabel")
        self.fileButton = QtWidgets.QPushButton(self.centralwidget)
        self.fileButton.setGeometry(QtCore.QRect(20, 300, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.fileButton.setFont(font)
        self.fileButton.setStyleSheet("QPushButton{\n"
"border: 2px solid black;\n"
"border-radius:10px;\n"
"background: rgba(0,0,0,0);\n"
"border-color: #2196F3;\n"
"color: dodgerblue;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"background: #2196F3;\n"
"color:white;\n"
"}")
        self.fileButton.setIconSize(QtCore.QSize(16, 16))
        self.fileButton.setObjectName("fileButton")
        self.folderButton = QtWidgets.QPushButton(self.centralwidget)
        self.folderButton.setGeometry(QtCore.QRect(20, 180, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.folderButton.setFont(font)
        self.folderButton.setStyleSheet("QPushButton{\n"
"border: 2px solid black;\n"
"border-radius:10px;\n"
"background: rgba(0,0,0,0);\n"
"border-color: #2196F3;\n"
"color: dodgerblue;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"background: #2196F3;\n"
"color:white;\n"
"}")
        self.folderButton.setIconSize(QtCore.QSize(16, 16))
        self.folderButton.setAutoDefault(False)
        self.folderButton.setDefault(False)
        self.folderButton.setFlat(False)
        self.folderButton.setObjectName("folderButton")
        self.webcamButton = QtWidgets.QPushButton(self.centralwidget)
        self.webcamButton.setGeometry(QtCore.QRect(20, 370, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.webcamButton.setFont(font)
        self.webcamButton.setStyleSheet("QPushButton{\n"
"border: 2px solid black;\n"
"border-radius:10px;\n"
"background: rgba(0,0,0,0);\n"
"border-color: #2196F3;\n"
"color: dodgerblue;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"background: #2196F3;\n"
"color:white;\n"
"}")
        self.webcamButton.setIconSize(QtCore.QSize(16, 16))
        self.webcamButton.setObjectName("webcamButton")
        self.resultLabel = QtWidgets.QLabel(self.centralwidget)
        self.resultLabel.setGeometry(QtCore.QRect(20, 410, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.resultLabel.setFont(font)
        self.resultLabel.setStyleSheet("background:rgba(0,0,0,0);")
        self.resultLabel.setObjectName("resultLabel")
        self.execTimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.execTimeLabel.setGeometry(QtCore.QRect(270, 430, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.execTimeLabel.setFont(font)
        self.execTimeLabel.setStyleSheet("background:rgba(0,0,0,0);")
        self.execTimeLabel.setObjectName("execTimeLabel")
        self.matchLabel = QtWidgets.QLabel(self.centralwidget)
        self.matchLabel.setGeometry(QtCore.QRect(20, 440, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.matchLabel.setFont(font)
        self.matchLabel.setStyleSheet("background:rgba(0,0,0,0);")
        self.matchLabel.setObjectName("matchLabel")
        self.execTime = QtWidgets.QLabel(self.centralwidget)
        self.execTime.setGeometry(QtCore.QRect(400, 430, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.execTime.setFont(font)
        self.execTime.setStyleSheet("background:rgba(0,0,0,0);")
        self.execTime.setObjectName("execTime")
        self.trainingTime = QtWidgets.QLabel(self.centralwidget)
        self.trainingTime.setGeometry(QtCore.QRect(20, 240, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.trainingTime.setFont(font)
        self.trainingTime.setStyleSheet("background:rgba(0,0,0,0);")
        self.trainingTime.setObjectName("trainingTime")
        self.testImage = QtWidgets.QLabel(self.centralwidget)
        self.testImage.setGeometry(QtCore.QRect(270, 160, 251, 251))
        self.testImage.setStyleSheet("background-color: rgba(0,0,0,0)")
        self.testImage.setText("")
        self.testImage.setObjectName("testImage")
        self.closestImage = QtWidgets.QLabel(self.centralwidget)
        self.closestImage.setGeometry(QtCore.QRect(570, 160, 251, 251))
        self.closestImage.setStyleSheet("background-color: rgba(0,0,0,0)")
        self.closestImage.setText("")
        self.closestImage.setObjectName("closestImage")
        self.trainingTime_2 = QtWidgets.QLabel(self.centralwidget)
        self.trainingTime_2.setGeometry(QtCore.QRect(20, 210, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.trainingTime_2.setFont(font)
        self.trainingTime_2.setStyleSheet("background:rgba(0,0,0,0);")
        self.trainingTime_2.setObjectName("trainingTime_2")
        self.trainingTime_3 = QtWidgets.QLabel(self.centralwidget)
        self.trainingTime_3.setGeometry(QtCore.QRect(20, 330, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.trainingTime_3.setFont(font)
        self.trainingTime_3.setStyleSheet("background:rgba(0,0,0,0);")
        self.trainingTime_3.setObjectName("trainingTime_3")
        self.folderButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.folderButton_2.setGeometry(QtCore.QRect(20, 140, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.folderButton_2.setFont(font)
        self.folderButton_2.setStyleSheet("QPushButton{\n"
"border: 2px solid black;\n"
"border-radius:10px;\n"
"background: rgba(0,0,0,0);\n"
"border-color: #2196F3;\n"
"color: dodgerblue;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"background: #2196F3;\n"
"color:white;\n"
"}")
        self.folderButton_2.setIconSize(QtCore.QSize(16, 16))
        self.folderButton_2.setAutoDefault(False)
        self.folderButton_2.setDefault(False)
        self.folderButton_2.setFlat(False)
        self.folderButton_2.setObjectName("folderButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.folderButton.clicked.connect(self.training)
        self.fileButton.clicked.connect(self.recog)
        self.webcamButton.clicked.connect(self.recogWebcam)
        self.folderButton_2.clicked.connect(self.read_db)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.folderButton, self.closestImageBorder)
        MainWindow.setTabOrder(self.closestImageBorder, self.fileButton)
        MainWindow.setTabOrder(self.fileButton, self.testImageBorder)
        MainWindow.setTabOrder(self.testImageBorder, self.webcamButton)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.appTitle.setText(_translate("MainWindow", "Face Recognition BPJS"))
        self.testLabel.setText(_translate("MainWindow", "Test Image"))
        self.closestLabel.setText(_translate("MainWindow", "Closest Image"))
        self.datasetLabel.setText(_translate("MainWindow", "Insert Your Dataset"))
        self.imageLabel.setText(_translate("MainWindow", "Insert Your Image"))
        self.fileButton.setText(_translate("MainWindow", "Choose File"))
        self.folderButton.setText(_translate("MainWindow", "Choose Folder"))
        self.webcamButton.setText(_translate("MainWindow", "WebCam"))
        self.resultLabel.setText(_translate("MainWindow", "Result"))
        self.execTimeLabel.setText(_translate("MainWindow", "Execution Time:"))
        self.matchLabel.setText(_translate("MainWindow", "None"))
        self.execTime.setText(_translate("MainWindow", "00:00:00.000"))
        self.trainingTime.setText(_translate("MainWindow", "00:00:00.000"))
        self.trainingTime_2.setText(_translate("MainWindow", "No Folder Chosen"))
        self.trainingTime_3.setText(_translate("MainWindow", "No File Chosen"))
        self.folderButton_2.setText(_translate("MainWindow", "Choose Data"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
